Searching 33 files for "RealQ" (case sensitive)

~/Math/Apples/Q3/Main/Kernel/Cauchy.wl:
    5  
    6  { Complex, ComplexQ,
    7:   Real, QuantumMob`Q3`RealQ,
    8    Integer, IntegerQ, HalfIntegerQ,
    9    Binary, BinaryQ, Binaries };
   ..
   34  
   35  
   36: (* Conjugate[ x_?QuantumMob`Q3`RealQ ] := x *)
   37  
   38  NonNegative[ Times[_?NonNegative, a__] ] := NonNegative[ Times[a] ]
   ..
   40  NonNegative[ z_ * Conjugate[z_] ] = True;
   41  
   42: NonNegative[ Power[_?QuantumMob`Q3`RealQ, _?EvenQ] ] = True;
   43  
   44  NonNegative[ HoldPattern[ _?NonNegative + _?NonNegative ] ] = True;
   ..
  108    MultiplyKind[x] ^= Real;
  109    MultiplyKind[x[___]] ^= Real;
  110:   x /: QuantumMob`Q3`RealQ[x] = True;
  111:   x /: QuantumMob`Q3`RealQ[x[___]] = True;
  112    x /: Element[x, Reals] = True;
  113    x /: Element[x[___], Reals] = True;
  ...
  233  
  234  
  235: (**** <RealQ> ****)
  236  
  237: QuantumMob`Q3`RealQ::usage = "RealQ[z] returns True if z is a real quantity, and False otherwise."
  238  
  239: SetAttributes[QuantumMob`Q3`RealQ, Listable]
  240  
  241: QuantumMob`Q3`RealQ[I] = False
  242  
  243: QuantumMob`Q3`RealQ[ Pi | E | EulerGamma | Infinity ] = True
  244  
  245: QuantumMob`Q3`RealQ[_Real] = True
  246  
  247: QuantumMob`Q3`RealQ[_Integer] = True
  248  
  249: QuantumMob`Q3`RealQ[_Rational] = True
  250  
  251: QuantumMob`Q3`RealQ[ z_ * Conjugate[z_] ] = True
  252  
  253: QuantumMob`Q3`RealQ[ z_ + Conjugate[z_] ] = True
  254  
  255: QuantumMob`Q3`RealQ[ Power[z_, n_Integer] Power[Conjugate[z_], n_Integer] ] /; ComplexQ[z] = True
  256  
  257: QuantumMob`Q3`RealQ[ Power[z_, n_Integer] + Power[Conjugate[z_], n_Integer] ] /; ComplexQ[z] = True
  258  
  259: QuantumMob`Q3`RealQ[ z_ - Conjugate[z_] ] /; ComplexQ[z] = False
  260  
  261: QuantumMob`Q3`RealQ[ Conjugate[z_] - z_ ] /; ComplexQ[z] = False
  262  
  263: QuantumMob`Q3`RealQ[ Power[_?NonNegative, _?Positive] ] = True
  264  
  265: QuantumMob`Q3`RealQ[ Power[_?Positive, _?QuantumMob`Q3`RealQ] ] = True
  266  
  267: QuantumMob`Q3`RealQ[ Power[_?QuantumMob`Q3`RealQ, _?IntegerQ] ] = True
  268  
  269: QuantumMob`Q3`RealQ[ Abs[_?CommutativeQ] ] = True
  270  
  271  Scan[
  272:   (QuantumMob`Q3`RealQ[#[_?QuantumMob`Q3`RealQ]] = True;) &,
  273    {Abs, Exp, Sinc, Sin, Csc, Sinh, Csch, Cos, Sec, Cosh, Sech, Tan, Tanh, Cot, Coth}
  274   ]
  275  
  276: QuantumMob`Q3`RealQ[Times[_?QuantumMob`Q3`RealQ, a__]] := QuantumMob`Q3`RealQ[Times[a]]
  277  
  278: QuantumMob`Q3`RealQ[Plus[_?QuantumMob`Q3`RealQ, a__]] := QuantumMob`Q3`RealQ[Plus[a]]
  279  
  280: QuantumMob`Q3`RealQ[_] = False
  281  (* Like IntegerQ, EvenQ, OddQ, etc., it returns False unless expr passes
  282     definitely the corresponding test. Namely, they return False if expr is
  283     undetermined. *)
  284  
  285: (**** </RealQ> ****)
  286  
  287  

~/Math/Apples/Q3/Main/Kernel/Pauli.wl:
 2840    Message[Rotation::real, v];
 2841    Rotation[phi, Re @ v, S, rest]
 2842:  ) /; Not @ AllTrue[v, QuantumMob`Q3`RealQ] /; AllTrue[v, NumericQ]
 2843  
 2844  Rotation[phi_, v:{_, _, _}, S:(_?SpinQ|_?QubitQ), rest___] :=

~/Math/Apples/Q3/Main/Kernel/Wick.wl:
   93      WickState[{fac, (re - Transpose[re])/2}, rest]
   94    ]
   95: ] /; Not[arrayRealQ @ cvr]
   96  
   97  
   ..
  139  Times[z_?NumericQ, WickState[{fac_?NumericQ, cvr_?MatrixQ}, rest___]] := 
  140    WickState[{z*fac, cvr}, rest] /;
  141:     If[ QuantumMob`Q3`RealQ[z], True,
  142        Message[WickState::convex, z];
  143        False
  ...
  428  Dagger @ WickUnitary[mat_?MatrixQ, rest___] :=
  429    WickUnitary[Transpose @ mat, rest] /;
  430:   If[ arrayRealQ[mat], True,
  431      Message[WickUnitary::complex, ArrayShort @ mat];
  432      False    
  ...
  609  WickHermitianQ[mat_?SquareMatrixQ] := And[
  610    EvenQ[Length @ mat],
  611:   arrayRealQ[mat],
  612    AntisymmetricMatrixQ[mat]
  613  ]

~/Math/Apples/Q3/Main/Kernel/Wimmer.wl:
   20    *)
   21  
   22: arrayRealQ::usage = "arrayRealQ[array] returns True if array is an array of real numbers.\narrayRealQ[array, test] first invokes ArrayQ[array, 1|2, test]."
   23  
   24: arrayRealQ[obj_, test_] := And[
   25    ArrayQ[obj, 1|2, test],
   26:   arrayRealQ[obj]
   27  ]
   28  
   29: arrayRealQ[obj_SymmetrizedArray] :=
   30    FreeQ[Values @ SymmetrizedArrayRules @ obj, _Complex]
   31  
   32: arrayRealQ[obj_SparseArray] :=
   33    FreeQ[obj["ExplicitValues"], _Complex]
   34  
   35: arrayRealQ[obj_] :=
   36    FreeQ[obj, _Complex]
   37  (* NOTE: FreeQ is much fastern than, e.g., MatrixQ[obj, Not[MatchQ[#, _Complex]]&] *)
   ..
   77    Switch[ OptionValue[Method],
   78      Automatic,
   79:       If[ arrayRealQ[mat],
   80          PfaffianHessenberg[N @ mat],
   81          PfaffianLTL[mat, OptionValue @ Tolerance]
   ..
  107      Automatic,
  108        Which[
  109:         arrayRealQ[mat], SkewHessenberg[N @ mat],
  110          True, SkewLTL[mat]
  111        ],
  ...
  284  
  285  (* NOTE: HessenbergDecomposition only receives a finite-preciesion matrix. *)
  286: PfaffianHessenberg[mat_?arrayRealQ, ___] := Module[
  287    {H, Q},
  288    {Q, H} = HessenbergDecomposition[N @ mat];

52 matches across 4 files
